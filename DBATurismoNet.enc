DROP DATABASE IF EXISTS TurismoNet;
CREATE DATABASE IF NOT EXISTS TurismoNet;

USE TurismoNet;

/*REGISTRO DE LUGARES TURISTICOS... DICIENDO A QUE PROVINCIA PERTENECE EL LUGAR*/

/*CREAMOS LA TABLA DE UBICACIÓN*/
CREATE TABLE ProvinciaUbicacion (
 idUbicacion CHAR(4) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 Provincia VARCHAR(20) NOT NULL, -- SOLO SE RELACIONARA POR PROVINCIA
 
  CONSTRAINT pk_idUbicacion PRIMARY KEY (idUbicacion)
);

/*CREAMOS LA TABLA DE LUGAR TURISTICO*/
CREATE TABLE LugarTuristico (
 idLugar CHAR(4) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 titulo VARCHAR(30) NOT NULL,
 descripcion TEXT NOT NULL,
 imgLugar MEDIUMBLOB NOT NULL, -- UNA FOTO DEL LUGAR TURISTICO
 idUbicacion CHAR(4) NOT NULL, -- HARÁ REFERENCIA A QUE PROVINCIA, DISTRITO PERTENECE EL LUGAR TURISTICO
 fecha DATE NOT NULL, -- FORMATO AÑO - MES - DÍA, DE PUBLICACIÓN
 
 CONSTRAINT pk_idLugar PRIMARY KEY (idLugar),
 CONSTRAINT fk_idUbicacion FOREIGN KEY (idUbicacion) REFERENCES ProvinciaUbicacion (idUbicacion)
);




/*REGISTRO DE LAS EMPRESAS... Y USUARIOS*/

/*TABLA PARA REGISTRO COMO PERSONA*/
CREATE TABLE Persona (
 idPersona CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 nombres VARCHAR(20) NOT NULL,
 apPaterno VARCHAR(20) NOT NULL,
 apMaterno VARCHAR(20) NOT NULL,
 dni CHAR(8) NOT NULL, -- DNI UNICO POR PERSONA
 correo VARCHAR(20) NOT NULL, -- TIENE QUE SER UNICO
 celular CHAR(9) NOT NULL, -- SE NECESITA PARA REALIZAR CHARLA PERSONAL
 sexo CHAR(1) NOT NULL,
 
 CONSTRAINT pk_Persona PRIMARY KEY (idPersona),
 CONSTRAINT uni_dni UNIQUE (dni),
 CONSTRAINT uni_celular UNIQUE (celular),
 CONSTRAINT uni_correo UNIQUE (correo),
 CONSTRAINT chek_dni CHECK (dni LIKE ('0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9')),
 CONSTRAINT chek_movil CHECK (celular LIKE ('0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9')),
 CONSTRAINT chek_sexo CHECK (sexo IN ('F','M'))
);

/*TABLA DE REGISTRO DE USUARIO DE EMPRESA*/
CREATE TABLE usuarioPersona (
 idUsuario CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 idPersona CHAR(5) NOT NULL, -- HACE REFERENCIA TABLA PERSONA
 usuarioCorreo VARCHAR(20) NOT NULL, -- TIENE QUE SER IGUAL QUE EL CORREO REGISTRADO COMO PERSONA
 contraseña VARCHAR(20) NOT NULL,  -- CONTRASEÑA
 
 CONSTRAINT pk_idUsuario PRIMARY KEY (idUsuario),
 CONSTRAINT fk_idPersona FOREIGN KEY (idPersona) REFERENCES Persona (idPersona),
 CONSTRAINT uni_usuarioCorreo UNIQUE (usuarioCorreo)
);




/*REGISTRO COMO EMPRESA*/
CREATE TABLE Empresa (
 idEmpresa CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 nombreEmpresa VARCHAR(20) NOT NULL, -- NOMBRE DE LA EMPRESA A REGISTRAR
 razonSocial VARCHAR(20) NOT NULL,
 ruc CHAR(11) NOT NULL, -- RUC DE LA EMPRESA
 correoEmpresa VARCHAR(20) NOT NULL, -- CORREO NECESARIO PARA INICIAR SESION COMO EMPRESA
 dirrecion VARCHAR(30) NOT NULL, -- UBICACION CENTRAL
 descripcion TEXT NOT NULL, -- DESCRIPCION DE LA EMPRESA A QUE SE DEDICA
 celular CHAR(9) NOT NULL,
 fijo CHAR(9) NOT NULL,
 
 CONSTRAINT pk_idEmpresa PRIMARY KEY (idEmpresa),
 CONSTRAINT uni_ruc UNIQUE (ruc),
 CONSTRAINT uni_cel UNIQUE (celular),
 CONSTRAINT uni_fijo UNIQUE (fijo),
 CONSTRAINT chek_ruc CHECK (ruc LIKE ('0-9','0-9','0-9','0-9|','0-9','0-9','0-9','0-9','0-9','0-9','0-9')),
 CONSTRAINT chek_celular CHECK (celular LIKE ('0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9')),
 CONSTRAINT chek_fijo CHECK (fijo LIKE ('0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9','0-9'))
);

/*REGISTRO USUARIO DE LA EMPRESA*/
CREATE TABLE usuarioEmpresa (
 idusuarioEmpresa CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 idEmpresa CHAR(5) NOT NULL, -- HACE REFERENCIA A LA EMPRESA REGISTRADA
 empresaCorreo VARCHAR(20) NOT NULL, -- USUARIO
 contraseñaEmpresa VARCHAR(20) NOT NULL, -- CONTRASEÑA
 
 CONSTRAINT pk_idusuarioEmpresa PRIMARY KEY (idusuarioEmpresa),
 CONSTRAINT fk_idEmpresa FOREIGN KEY (idEmpresa) REFERENCES Empresa (idEmpresa),
 CONSTRAINT uni_empresaCorreo UNIQUE (empresaCorreo)
);

/*REGISTRAR SERVICIOS*/
CREATE TABLE servicioEmpresa (
 idservicioEmpresa CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 idEmpresa CHAR(5) NOT NULL, -- HACEMOS REFERENCIA A LA TABLA EMPRESA
 nombreServicio VARCHAR(5) NOT NULL, -- REFERENCIA AL SERVICIO QUE SE VA A REALIZAR
 horarioAtención VARCHAR(20) NOT NULL, -- TENER CUIDADO SOLO ES EL HORARIO EN EL QUE SE ATIENDE EJEMPLO: 8:00 AM - 10:00 PM
 descripcionServicio TEXT NOT NULL, -- CONCEPTO O UNA DESCRIPCION DE TODO CON LO QUE CONTARA EL SERVICIO PRESTADO
 imgServicio MEDIUMBLOB NOT NULL, -- UNA FOTO DEL SERVICIO A PRESTAR
 idUbicacion CHAR(4) NOT NULL, -- DONDE SE VA A BRINDAR EL SERVICIO EJEMPLO: PISCO
 idLugar CHAR(4) NOT NULL, -- LUGAR DONDE SE BRINDARA EL SERVICIO EJEMPLO: PARACAS
 estadoServicio CHAR(1) NOT NULL, -- PARA SABER SI EL SERVICIO ESTA ACTIVO O NO
 
 CONSTRAINT pk_idservicioEmpresa PRIMARY KEY (idservicioEmpresa),
 CONSTRAINT fk_idEmpresaServicio FOREIGN KEY (idEmpresa) REFERENCES Empresa (idEmpresa),
 CONSTRAINT chek_estadoServicio CHECK (estadoServicio IN ('1','0')),
 CONSTRAINT fk_ubicacionId FOREIGN KEY (idUbicacion) REFERENCES ProvinciaUbicacion (idUbicacion),
 CONSTRAINT fk_lugarId FOREIGN KEY (idLugar) REFERENCES LugarTuristico (idLugar)
);

/*BANDEJA DE ENTRADA DE LA EMPRESA*/
CREATE TABLE bandejaEmpresa (
 idbandejaEmpresa CHAR(5) NOT NULL, -- SE TIENE QUE AUTOGENERAR
 idEmpresa CHAR(5) NOT NULL, -- OBTENEMOS EL ID CON EL NUMERO DE RUC DE LA EMPRESA
 idPersona CHAR(5) NOT NULL, -- REFERENCIA A LA TABLA PERSONA
 mensaje TEXT NOT NULL, -- EL MENSAJE SE TIENE QUE AUTOGENERAR
 
 CONSTRAINT pk_idbandejaEmpresa PRIMARY KEY (idbandejaEmpresa),
 CONSTRAINT fk_empresaId FOREIGN KEY (idEmpresa) REFERENCES Empresa (idEmpresa),
 CONSTRAINT fk_personaId FOREIGN KEY (idPersona) REFERENCES Persona (idPersona)
);